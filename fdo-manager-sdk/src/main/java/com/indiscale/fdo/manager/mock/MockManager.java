package com.indiscale.fdo.manager.mock;

import com.google.gson.JsonPrimitive;
import com.indiscale.fdo.manager.DefaultManager;
import com.indiscale.fdo.manager.DefaultProfileRegistry;
import com.indiscale.fdo.manager.DefaultRepositoryRegistry;
import com.indiscale.fdo.manager.api.Data;
import com.indiscale.fdo.manager.api.DigitalObject;
import com.indiscale.fdo.manager.api.FDO;
import com.indiscale.fdo.manager.api.FdoProfile;
import com.indiscale.fdo.manager.api.FdoType;
import com.indiscale.fdo.manager.api.Manager;
import com.indiscale.fdo.manager.api.Metadata;
import com.indiscale.fdo.manager.api.PidUnresolvableException;
import com.indiscale.fdo.manager.api.RepositoryConnection;
import com.indiscale.fdo.manager.api.UnknownProfileException;
import com.indiscale.fdo.manager.api.UnknownRepositoryException;
import com.indiscale.fdo.manager.api.UnknownRepositoryTypeException;
import com.indiscale.fdo.manager.api.UnsuccessfulOperationException;
import com.indiscale.fdo.manager.api.ValidationException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

class MockHandleRecord {

  private DigitalObject d_o;
  private String repositoryId;

  public MockHandleRecord(DigitalObject d_o, String repositoryId) {
    this.d_o = d_o;
    this.repositoryId = repositoryId;
  }

  public DigitalObject getDO() {
    return d_o;
  }

  public String getRepositoryId() {
    return repositoryId;
  }
}

/**
 * Mock-up implementation of the {@link Manager} used for testing. This implementation stores newly
 * created object in memory-based MockRepositories and only resolves pids generated by this manager
 * itself.
 */
public class MockManager extends DefaultManager {

  private static Map<String, MockHandleRecord> pidRegistry = new HashMap<>();

  public MockManager() {
    MockRepositoryFactory mock = new MockRepositoryFactory(pidRegistry);
    DefaultRepositoryRegistry registry = this.getRepositoryRegistry();
    registry.registerRepositoryType(mock);
    try {
      registry.registerRepository(mock.createMockConfig("mock-repo-1"));
      registry.registerRepository(mock.createMockConfig("mock-repo-2"));
      registry.registerRepository(mock.createMockConfig("mock-repo-3"));
    } catch (UnknownRepositoryTypeException e) {
      e.printStackTrace();
    }
    DefaultProfileRegistry<FdoProfile> profileRegistry = getProfileRegistry();
    profileRegistry.registerProfile(createFdoProfile("mock-profile-1"));
    try {
      setDefaultProfile("mock-profile-1");
    } catch (UnknownProfileException e) {
      e.printStackTrace();
    }
  }

  private FdoProfile createFdoProfile(final String id) {
    return new MockProfile(id);
  }

  @Override
  public FDO createFDO(
      FdoProfile profile,
      FdoType type,
      RepositoryConnection repository,
      Data data,
      Metadata metadata)
      throws ValidationException {
    FDO fdo = super.createFDO(profile, type, repository, data, metadata);
    synchronized (pidRegistry) {
      pidRegistry.put(fdo.getPID(), new MockHandleRecord(fdo, repository.getId()));
      if (fdo.isFDO()) {
        if (fdo.getData() != null) {
          pidRegistry.put(
              fdo.getData().getPID(), new MockHandleRecord(fdo.getData(), repository.getId()));
        }
        if (fdo.getMetadata() != null) {
          pidRegistry.put(
              fdo.getMetadata().getPID(),
              new MockHandleRecord(fdo.getMetadata(), repository.getId()));
        }
      }
    }
    return fdo;
  }

  @Override
  public String purgeFDO(String pid) throws PidUnresolvableException, UnknownRepositoryException {
    synchronized (pidRegistry) {
      if (pidRegistry.containsKey(pid)) {
        String repo = super.purgeFDO(pid);
        pidRegistry.remove(pid);
        return repo;
      }
      throw new PidUnresolvableException("Unknown PID: " + pid);
    }
  }

  @Override
  public String deleteFDO(String pid, boolean deleteMD)
      throws PidUnresolvableException,
          UnknownRepositoryException,
          IllegalArgumentException,
          UnsuccessfulOperationException {
    synchronized (pidRegistry) {
      if (!pidRegistry.containsKey(pid)) {
        throw new PidUnresolvableException("Unknown PID: " + pid);
      }
      DigitalObject d_o = pidRegistry.get(pid).getDO();
      if (d_o == null || !d_o.isFDO()) {
        throw new IllegalArgumentException("Digital Object with PID " + pid + "is not an FDO.");
      }
      FDO fdo = d_o.toFDO();
      Data data = fdo.getData();
      // Update mock handle system
      // 1. Delete data bit-sequence
      try {
        InputStream dataData = data.getInputStream();
        // ToDo: Delete data bit-sequence
      } catch (java.io.IOException e) {
        // If any of the listed operations fails, all operations are rolled back
        // ToDo: Re-add data bit-sequence
        return null;
      }
      // 2. FDO_Status set to “deleted”, “URL_Status” added
      JsonPrimitive dataFdoStatus = null;
      JsonPrimitive dataUrlStatus = null;
      if (data.getAttributes() != null) {
        dataFdoStatus = data.getAttributes().getAsJsonPrimitive("FDO_Status");
        dataUrlStatus = data.getAttributes().getAsJsonPrimitive("URL_Status");
      }
      data.getAttributes().addProperty("FDO_Status", "deleted");
      data.getAttributes().addProperty("URL_Status", "");
      // 3. If delete_MD, delete metadata bit-sequence & update attributes
      if (deleteMD) {
        Metadata metadata = fdo.getMetadata();
        try {
          InputStream metadataData = metadata.getInputStream();
          // ToDo: Delete metadata bit-sequence
        } catch (java.io.IOException e) {
          // If any of the listed operations fails, all operations are rolled back
          if (dataFdoStatus != null) {
            data.getAttributes().addProperty("FDO_Status", dataFdoStatus.getAsString());
          } else {
            data.getAttributes().remove("FDO_Status");
          }
          if (dataUrlStatus != null) {
            data.getAttributes().addProperty("URL_Status", dataUrlStatus.getAsString());
          } else {
            data.getAttributes().remove("URL_Status");
          }
          // ToDo: Re-add metadata bit-sequence
          return null;
        }
        JsonPrimitive metadataFdoStatus = null;
        JsonPrimitive metadataUrlStatus = null;
        if (data.getAttributes() != null) {
          metadataFdoStatus = metadata.getAttributes().getAsJsonPrimitive("FDO_Status");
          metadataUrlStatus = metadata.getAttributes().getAsJsonPrimitive("URL_Status");
        }
        metadata.getAttributes().addProperty("FDO_Status", "deleted");
        metadata.getAttributes().addProperty("URL_Status", "");
      }
      // 4. FDO_Status set to “deleted”
      JsonPrimitive fdoFdoStatus = fdo.getAttributes().getAsJsonPrimitive("FDO_Status");
      fdo.getAttributes().addProperty("FDO_Status", "deleted");

      return getCurrentRepository(pid);
    }
  }

  @Override
  public String deleteFDO(String pid)
      throws PidUnresolvableException,
          UnknownRepositoryException,
          IllegalArgumentException,
          UnsuccessfulOperationException {
    return deleteFDO(pid, false);
  }

  @Override
  public DigitalObject resolvePID(String pid) throws PidUnresolvableException {
    synchronized (pidRegistry) {
      MockHandleRecord rec = pidRegistry.get(pid);
      if (rec == null) {
        throw new PidUnresolvableException("Unknown PID: " + pid);
      }
      return rec.getDO();
    }
  }

  @Override
  public String getCurrentRepository(String pid) throws PidUnresolvableException {
    synchronized (pidRegistry) {
      MockHandleRecord rec = pidRegistry.get(pid);
      if (rec == null) {
        throw new PidUnresolvableException("Unknown PID: " + pid);
      }
      return rec.getRepositoryId();
    }
  }

  @Override
  public FdoProfile getDefaultProfile() {
    return getProfileRegistry().listProfiles().get(0);
  }
}
