# generated by datamodel-codegen:
#   filename:  0.DOIP_Op.Search-Request.json
#   version:   0.26.0

from __future__ import annotations

from typing import Literal, Optional, Union

from pydantic import BaseModel, Extra, Field, conint


class Authentication(BaseModel):
    class Config:
        extra = Extra.forbid

    username: Optional[str] = None
    password: Optional[str] = None


class Authentication1(BaseModel):
    class Config:
        extra = Extra.forbid

    token: Optional[str] = None


class Authentication2(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[str] = None


class Attributes(BaseModel):
    class Config:
        extra = Extra.forbid

    query: str = Field(
        ..., description='the search query to be performed, in a textual representation'
    )
    pageNum: Optional[conint(ge=0)] = Field(
        None, description='the page number to be returned, starting with 0'
    )
    pageSize: Optional[int] = Field(
        None,
        description="the page size to be returned; if missing or negative, all results will be returned; if zero, no results are returned, but the 'size' is still returned",
    )
    sortFields: Optional[str] = Field(
        None,
        description='a comma-separated list of sort specifications, each of which is a field name optionally followed by ASC or DESC',
    )
    type: Optional[Literal['id', 'full']] = Field(
        'full',
        description="either 'id', to return just object ids, or 'full', to return full object data (omitting element data); defaults to 'full'",
    )


class SearchRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    requestId: Optional[str] = Field(
        None,
        description='requestId: the identifier of the request provided by the client; shall be unique within a given DOIP session so clients can distinguish between DOIP service responses. The requestId shall be a string not exceeding 4096 bits.',
    )
    clientId: Optional[str] = Field(
        None, description='clientId: the identifier of the client.'
    )
    targetId: str = Field(
        ...,
        description='targetId: the identifier of the DO on which the operation is to be invoked; the DOIP service could itself be the target.',
    )
    operationId: str = Field(
        '0.DOIP/Op.Search',
        const=True,
        description='operationId: the identifier of the operation to be performed.',
    )
    authentication: Optional[
        Union[Authentication, Authentication1, Authentication2]
    ] = Field(
        None,
        description='authentication: optional JSON object used by clients to authenticate.',
    )
    attributes: Attributes = Field(
        ...,
        description='attributes: optional array of JSON properties; operation stipulated.',
    )
